// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using capacitaciones_api.Models;

#nullable disable

namespace capacitaciones_api.Migrations
{
    [DbContext(typeof(CapacitacionesPruebasContext))]
    [Migration("20250904165249_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("capacitaciones_api.Models.AvancesCurso", b =>
                {
                    b.Property<int>("IdAvance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAvance")
                        .HasAnnotation("Relational:JsonPropertyName", "progressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAvance"));

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("smalldatetime")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<int?>("IdCurso")
                        .HasColumnType("int")
                        .HasColumnName("idCurso")
                        .HasAnnotation("Relational:JsonPropertyName", "courseId");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("idEstado")
                        .HasAnnotation("Relational:JsonPropertyName", "stateId");

                    b.Property<int?>("IdSeccion")
                        .HasColumnType("int")
                        .HasColumnName("idSeccion")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionId");

                    b.Property<int?>("IdVideo")
                        .HasColumnType("int")
                        .HasColumnName("idVideo")
                        .HasAnnotation("Relational:JsonPropertyName", "videoId");

                    b.Property<int?>("KEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("K_Empleado")
                        .HasAnnotation("Relational:JsonPropertyName", "employeeId");

                    b.Property<int?>("VersionCurso")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("IdAvance")
                        .HasName("PK__AvancesC__B1657DC66A9225A1");

                    b.HasIndex("IdCurso");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdSeccion");

                    b.HasIndex("IdVideo");

                    b.ToTable("AvancesCurso", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "courseProgress");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategoria")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("Nombre")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryName");

                    b.HasKey("IdCategoria")
                        .HasName("PK__Categori__8A3D240C0D892E29");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Curso", b =>
                {
                    b.Property<int>("IdCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCurso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCurso"));

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int")
                        .HasColumnName("idCategoria")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    b.Property<string>("Nombre")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("Relational:JsonPropertyName", "courseName");

                    b.Property<string>("PortadaReferencia")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)")
                        .HasAnnotation("Relational:JsonPropertyName", "coverReference");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("IdCurso")
                        .HasName("PK__Cursos__8551ED05DAE0FEB4");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Cursos");

                    b.HasAnnotation("Relational:JsonPropertyName", "courses");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstado")
                        .HasAnnotation("Relational:JsonPropertyName", "stateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstado"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("Nombre")
                        .HasAnnotation("Relational:JsonPropertyName", "stateName");

                    b.HasKey("IdEstado")
                        .HasName("PK__Estados__62EA894AA6FDF85B");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Evaluacion", b =>
                {
                    b.Property<int>("IdEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEvaluacion")
                        .HasAnnotation("Relational:JsonPropertyName", "evaluationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvaluacion"));

                    b.Property<int?>("IdSeccion")
                        .HasColumnType("int")
                        .HasColumnName("idSeccion")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionId");

                    b.HasKey("IdEvaluacion")
                        .HasName("PK__Evaluaci__0E50CD2751910E8E");

                    b.HasIndex("IdSeccion");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Inscripcion", b =>
                {
                    b.Property<int>("IdInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idInscripcion")
                        .HasAnnotation("Relational:JsonPropertyName", "registrationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInscripcion"));

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("decimal(18, 0)")
                        .HasAnnotation("Relational:JsonPropertyName", "grade");

                    b.Property<int?>("IdCurso")
                        .HasColumnType("int")
                        .HasColumnName("idCurso")
                        .HasAnnotation("Relational:JsonPropertyName", "courseId");

                    b.Property<int?>("KEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("K_Empleado")
                        .HasAnnotation("Relational:JsonPropertyName", "employeeId");

                    b.HasKey("IdInscripcion")
                        .HasName("PK__Inscripc__3D58AB69DE6F91C6");

                    b.HasIndex("IdCurso");

                    b.ToTable("Inscripciones");

                    b.HasAnnotation("Relational:JsonPropertyName", "enrollments");
                });

            modelBuilder.Entity("capacitaciones_api.Models.OpcionesPregunta", b =>
                {
                    b.Property<int>("IdOpcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idOpcion")
                        .HasAnnotation("Relational:JsonPropertyName", "optionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOpcion"));

                    b.Property<bool?>("EsRespuesta")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isCorrectAnswer");

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("idPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "questionId");

                    b.Property<string>("Opcion")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)")
                        .HasAnnotation("Relational:JsonPropertyName", "option");

                    b.HasKey("IdOpcion")
                        .HasName("PK__Opciones__A914DF355F8AF80E");

                    b.HasIndex("IdPregunta");

                    b.ToTable("OpcionesPreguntas");

                    b.HasAnnotation("Relational:JsonPropertyName", "options");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Pregunta", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "questionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"));

                    b.Property<int?>("IdEvaluacion")
                        .HasColumnType("int")
                        .HasColumnName("idEvaluacion")
                        .HasAnnotation("Relational:JsonPropertyName", "evaluationId");

                    b.Property<int?>("IdTipoPregunta")
                        .HasColumnType("int")
                        .HasColumnName("idTipoPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "questionTypeId");

                    b.Property<string>("TextoPregunta")
                        .HasMaxLength(280)
                        .IsUnicode(false)
                        .HasColumnType("varchar(280)")
                        .HasColumnName("TextoPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "question");

                    b.HasKey("IdPregunta")
                        .HasName("PK__Pregunta__623EEC4278A0C9A8");

                    b.HasIndex("IdEvaluacion");

                    b.HasIndex("IdTipoPregunta");

                    b.ToTable("Preguntas");

                    b.HasAnnotation("Relational:JsonPropertyName", "questions");
                });

            modelBuilder.Entity("capacitaciones_api.Models.PuestosCurso", b =>
                {
                    b.Property<int>("IdPuestoCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPuestoCurso")
                        .HasAnnotation("Relational:JsonPropertyName", "positionCourseId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuestoCurso"));

                    b.Property<int?>("IdCurso")
                        .HasColumnType("int")
                        .HasColumnName("idCurso")
                        .HasAnnotation("Relational:JsonPropertyName", "courseId");

                    b.Property<int?>("KPuesto")
                        .HasColumnType("int")
                        .HasColumnName("K_Puesto")
                        .HasAnnotation("Relational:JsonPropertyName", "positionId");

                    b.HasKey("IdPuestoCurso")
                        .HasName("PK__PuestosC__501B70AF9767CAF5");

                    b.HasIndex("IdCurso");

                    b.ToTable("PuestosCursos");

                    b.HasAnnotation("Relational:JsonPropertyName", "coursePositions");
                });

            modelBuilder.Entity("capacitaciones_api.Models.RespuestasPregunta", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRespuesta")
                        .HasAnnotation("Relational:JsonPropertyName", "answerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespuesta"));

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("idPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "questionId");

                    b.Property<int?>("KEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("K_Empleado")
                        .HasAnnotation("Relational:JsonPropertyName", "employeeId");

                    b.Property<string>("Respuesta")
                        .HasMaxLength(280)
                        .IsUnicode(false)
                        .HasColumnType("varchar(280)")
                        .HasAnnotation("Relational:JsonPropertyName", "answer");

                    b.HasKey("IdRespuesta")
                        .HasName("PK__Respuest__8AB5BFC8EA242D0C");

                    b.HasIndex("IdPregunta");

                    b.ToTable("RespuestasPreguntas");

                    b.HasAnnotation("Relational:JsonPropertyName", "answers");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Seccion", b =>
                {
                    b.Property<int>("IdSeccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSeccion")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSeccion"));

                    b.Property<int?>("IdCurso")
                        .HasColumnType("int")
                        .HasColumnName("idCurso")
                        .HasAnnotation("Relational:JsonPropertyName", "courseId");

                    b.Property<string>("Nombre")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionName");

                    b.Property<int?>("Orden")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "order");

                    b.HasKey("IdSeccion")
                        .HasName("PK__Seccione__94B87A7C3B326106");

                    b.HasIndex("IdCurso");

                    b.ToTable("Secciones");

                    b.HasAnnotation("Relational:JsonPropertyName", "sections");
                });

            modelBuilder.Entity("capacitaciones_api.Models.TiposPregunta", b =>
                {
                    b.Property<int>("IdTipoPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoPregunta")
                        .HasAnnotation("Relational:JsonPropertyName", "questionTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPregunta"));

                    b.Property<string>("Tipo")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasAnnotation("Relational:JsonPropertyName", "questionType");

                    b.HasKey("IdTipoPregunta")
                        .HasName("PK__TiposPre__F3A2EBA797956516");

                    b.ToTable("TiposPreguntas");
                });

            modelBuilder.Entity("capacitaciones_api.Models.TiposUsuario", b =>
                {
                    b.Property<int>("IdTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoUsuario")
                        .HasAnnotation("Relational:JsonPropertyName", "userTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUsuario"));

                    b.Property<string>("Tipo")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasAnnotation("Relational:JsonPropertyName", "userType");

                    b.HasKey("IdTipoUsuario")
                        .HasName("PK__TiposUsu__03006BFF7B9A4D00");

                    b.ToTable("TiposUsuario", (string)null);
                });

            modelBuilder.Entity("capacitaciones_api.Models.Video", b =>
                {
                    b.Property<int>("IdVideo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVideo")
                        .HasAnnotation("Relational:JsonPropertyName", "videoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVideo"));

                    b.Property<int?>("Duracion")
                        .HasColumnType("int");

                    b.Property<int?>("IdSeccion")
                        .HasColumnType("int")
                        .HasColumnName("idSeccion")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionId");

                    b.Property<string>("Nombre")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasAnnotation("Relational:JsonPropertyName", "videoName");

                    b.Property<string>("Referencia")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)")
                        .HasAnnotation("Relational:JsonPropertyName", "videoReference");

                    b.HasKey("IdVideo")
                        .HasName("PK__Videos__D2D0AD2AA93D8AB3");

                    b.HasIndex("IdSeccion");

                    b.ToTable("Videos");

                    b.HasAnnotation("Relational:JsonPropertyName", "videos");
                });

            modelBuilder.Entity("capacitaciones_api.Models.AvancesCurso", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Curso", "IdCursoNavigation")
                        .WithMany("AvancesCursos")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("FK_AvanceCurso_Curso");

                    b.HasOne("capacitaciones_api.Models.Estado", "IdEstadoNavigation")
                        .WithMany("AvancesCursos")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_AvanceCurso_Estado");

                    b.HasOne("capacitaciones_api.Models.Seccion", "IdSeccionNavigation")
                        .WithMany("AvancesCursos")
                        .HasForeignKey("IdSeccion")
                        .HasConstraintName("FK_AvanceCurso_Seccion");

                    b.HasOne("capacitaciones_api.Models.Video", "IdVideoNavigation")
                        .WithMany("AvancesCursos")
                        .HasForeignKey("IdVideo")
                        .HasConstraintName("FK_AvanceCurso_Video");

                    b.Navigation("IdCursoNavigation");

                    b.Navigation("IdEstadoNavigation");

                    b.Navigation("IdSeccionNavigation");

                    b.Navigation("IdVideoNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Curso", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Categoria", "IdCategoriaNavigation")
                        .WithMany("Cursos")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_Curso_Categoria");

                    b.Navigation("IdCategoriaNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Evaluacion", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Seccion", "IdSeccionNavigation")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("IdSeccion")
                        .HasConstraintName("FK_Evaluacion_Seccion");

                    b.Navigation("IdSeccionNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Inscripcion", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Curso", "IdCursoNavigation")
                        .WithMany("Inscripciones")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("FK_Inscripcion_Curso");

                    b.Navigation("IdCursoNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.OpcionesPregunta", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Pregunta", "IdPreguntaNavigation")
                        .WithMany("OpcionesPregunta")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK_OpcionesPregunta_Pregunta");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Pregunta", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Evaluacion", "IdEvaluacionNavigation")
                        .WithMany("Pregunta")
                        .HasForeignKey("IdEvaluacion")
                        .HasConstraintName("FK_Pregunta_Evaluacion");

                    b.HasOne("capacitaciones_api.Models.TiposPregunta", "IdTipoPreguntaNavigation")
                        .WithMany("Pregunta")
                        .HasForeignKey("IdTipoPregunta")
                        .HasConstraintName("FK_Pregunta_TipoPregunta");

                    b.Navigation("IdEvaluacionNavigation");

                    b.Navigation("IdTipoPreguntaNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.PuestosCurso", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Curso", "IdCursoNavigation")
                        .WithMany("PuestosCursos")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("FK_PuestosCursos_Curso");

                    b.Navigation("IdCursoNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.RespuestasPregunta", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Pregunta", "IdPreguntaNavigation")
                        .WithMany("RespuestasPregunta")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK_RespuestasPregunta_Pregunta");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Seccion", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Curso", "IdCursoNavigation")
                        .WithMany("Secciones")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("FK_Seccion_Curso");

                    b.Navigation("IdCursoNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Video", b =>
                {
                    b.HasOne("capacitaciones_api.Models.Seccion", "IdSeccionNavigation")
                        .WithMany("Videos")
                        .HasForeignKey("IdSeccion")
                        .HasConstraintName("FK_Video_Seccion");

                    b.Navigation("IdSeccionNavigation");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Categoria", b =>
                {
                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Curso", b =>
                {
                    b.Navigation("AvancesCursos");

                    b.Navigation("Inscripciones");

                    b.Navigation("PuestosCursos");

                    b.Navigation("Secciones");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Estado", b =>
                {
                    b.Navigation("AvancesCursos");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Evaluacion", b =>
                {
                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Pregunta", b =>
                {
                    b.Navigation("OpcionesPregunta");

                    b.Navigation("RespuestasPregunta");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Seccion", b =>
                {
                    b.Navigation("AvancesCursos");

                    b.Navigation("Evaluaciones");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("capacitaciones_api.Models.TiposPregunta", b =>
                {
                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("capacitaciones_api.Models.Video", b =>
                {
                    b.Navigation("AvancesCursos");
                });
#pragma warning restore 612, 618
        }
    }
}
